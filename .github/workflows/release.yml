name: Build & attach binaries on Release

on:
  release:
    types: [published]   

permissions:
  contents: write      

jobs:
  build:
    name: Build ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
            archive: tar.gz
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build (release)
        run: cargo build --locked --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          BIN_NAME=$(grep -m1 '^name\s*=' Cargo.toml | sed 's/.*=\s*"\(.*\)"/\1/')
          TARGET_DIR="target/${{ matrix.target }}/release"
          OUT_DIR="${{ runner.temp }}/dist"
          mkdir -p "$OUT_DIR/$BIN_NAME"
          cp "$TARGET_DIR/$BIN_NAME${{ matrix.ext }}" "$OUT_DIR/$BIN_NAME/"
          # ajoute README/LICENSE si tu veux
          cp README.md "$OUT_DIR/$BIN_NAME/" || true
          cp LICENSE* "$OUT_DIR/$BIN_NAME/" || true

          cd "$OUT_DIR"
          if [ "${{ matrix.archive }}" = "zip" ]; then
            ARCHIVE="${BIN_NAME}-${{ matrix.target }}.zip"
            (cd "$BIN_NAME" && zip -r "../$ARCHIVE" .)
          else
            ARCHIVE="${BIN_NAME}-${{ matrix.target }}.tar.gz"
            tar -C "$BIN_NAME" -czf "$ARCHIVE" .
          fi
          echo "ARCHIVE_PATH=$OUT_DIR/$ARCHIVE" >> $GITHUB_ENV

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ARCHIVE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
